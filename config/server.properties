# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# 基础配置 #############################

# 每一个 broker 在集群范围内都有唯一的 ID，即使 broker 的 IP 发生变化，只要 ID 不变，就不会影响消息的消费
# The id of the broker. This must be set to a unique integer for each broker.
broker.id = 0

# 是否允许 topic 被删除，默认不允许
# Switch to enable topic deletion or not, default value is false
#delete.topic.enable=true

############################# 服务端网络相关配置 #############################

# server 端使用的协议
# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://:9092

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# 接收请求的线程数
# The number of threads handling network requests
num.network.threads = 3

# 执行请求的线程数
# The number of threads doing disk I/O
num.io.threads = 8

# 每个 socket 在内核中都有一个发送缓冲区（SO_SNDBUF）和一个接收缓冲区（SO_RCVBUF）。

# 发送缓冲区大小，默认是 102400 字节，如果是 -1 则使用操作系统默认值
# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes = 102400

# 接收缓冲区大小，默认是 102400 字节，如果是 -1 则使用操作系统默认值
# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes = 102400

# 请求的最大长度
# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes = 104857600


############################# 日志文件存储相关配置 #############################

# 用于存储日志文件的目录，如果有多个目录则使用逗号分隔
# A comma seperated list of directories under which to store log files
log.dirs = /home/zhenchao/workspace/data/kafka

# 每个 topic 默认的分区数目，默认是 1
# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions = 8

# 用来恢复日志文件，以及关闭服务时将日志文件落盘的线程数量，默认每个目录对应 1 个线程
# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir = 1

############################# 日志文件刷盘相关配置 #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# 每隔多少个消息触发一次刷盘操作
# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# 每隔多少毫秒触发一次刷盘操作
# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# 日志文件保存（饱和）策略配置 #############################

# 分为两种保存策略：
# 1. 日志文件存储时间达到阈值，则删除
# 2. 日志文件大小达到阈值，则删除
# 如果两种策略均配置，则哪个先满足执行哪个

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# 日志在 kafka 上的最大保存时间，默认为 168 小时
# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours = 168

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# 日志在 kafka 上的最大保存空间，当超过该值时创建一个新的文件，单位：字节
# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes = 1073741824

# 定期检查时间，默认每 5 分钟会触发 logckeaner 线程检查一次，看是否满足两种饱和策略之一
# The interval at which log segments are checked to see if they can be deleted according to the retention policies
log.retention.check.interval.ms = 300000

############################# ZK 相关配置 #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect = localhost:2181/kafka

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms = 6000